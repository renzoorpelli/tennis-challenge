// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TennisChallenge.Infrastructure.Data;

#nullable disable

namespace TennisChallenge.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PlayerTournament", b =>
                {
                    b.Property<Guid>("PlayersId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TournamentsId")
                        .HasColumnType("uuid");

                    b.HasKey("PlayersId", "TournamentsId");

                    b.HasIndex("TournamentsId");

                    b.ToTable("PlayerTournament");
                });

            modelBuilder.Entity("TennisChallenge.Core.Entities.Matches.Match", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("MatchDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("PlayerOneId")
                        .HasColumnType("uuid");

                    b.Property<int>("PlayerOnePoints")
                        .HasColumnType("integer");

                    b.Property<Guid>("PlayerTwoId")
                        .HasColumnType("uuid");

                    b.Property<int>("PlayerTwoPoints")
                        .HasColumnType("integer");

                    b.Property<int>("Round")
                        .HasColumnType("integer");

                    b.Property<Guid>("TournamentId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("WinnerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    NpgsqlIndexBuilderExtensions.IncludeProperties(b.HasIndex("Id"), new[] { "PlayerOneId", "PlayerTwoId", "TournamentId" });

                    b.HasIndex("PlayerOneId");

                    b.HasIndex("PlayerTwoId");

                    b.HasIndex("TournamentId");

                    b.ToTable("Matches", (string)null);
                });

            modelBuilder.Entity("TennisChallenge.Core.Entities.Players.Player", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<long>("Age")
                        .HasColumnType("bigint");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<long>("Level")
                        .HasColumnType("bigint");

                    b.Property<long>("Losses")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<long>("Wins")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.HasKey("Id");

                    b.ToTable("Players");

                    b.HasDiscriminator<string>("Gender").HasValue("Player");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("TennisChallenge.Core.Entities.Tournaments.PlayerTournament", b =>
                {
                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TournamentId")
                        .HasColumnType("uuid");

                    b.HasKey("PlayerId", "TournamentId");

                    b.HasIndex("TournamentId");

                    b.ToTable("PlayerTournaments");

                    b.HasData(
                        new
                        {
                            PlayerId = new Guid("b5e2c59e-d935-45b6-b087-1d74e4e11378"),
                            TournamentId = new Guid("c3d4097b-d01e-4e28-aa64-56233b158d83")
                        },
                        new
                        {
                            PlayerId = new Guid("4b9d627f-836e-4c43-954c-baaf1053a035"),
                            TournamentId = new Guid("c3d4097b-d01e-4e28-aa64-56233b158d83")
                        },
                        new
                        {
                            PlayerId = new Guid("8354cd01-71fa-47c2-a66f-6042ee0907ac"),
                            TournamentId = new Guid("c3d4097b-d01e-4e28-aa64-56233b158d83")
                        },
                        new
                        {
                            PlayerId = new Guid("02891735-bd59-4c05-b5bd-9e203ec8f45e"),
                            TournamentId = new Guid("c3d4097b-d01e-4e28-aa64-56233b158d83")
                        });
                });

            modelBuilder.Entity("TennisChallenge.Core.Entities.Tournaments.Tournament", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MatchesCount")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TournamentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("WinnerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Tournaments", t =>
                        {
                            t.HasCheckConstraint("CK_Tournaments_TournamentType", "\"TournamentType\" IN ('Male', 'Female')");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("6102ca09-c32a-4b55-9938-f4d39ec8afad"),
                            EndDate = new DateTime(2024, 9, 29, 18, 15, 39, 48, DateTimeKind.Utc).AddTicks(8226),
                            MatchesCount = 8,
                            Name = "Spring Championship",
                            StartDate = new DateTime(2024, 9, 24, 18, 15, 39, 48, DateTimeKind.Utc).AddTicks(8220),
                            TournamentType = "Male"
                        },
                        new
                        {
                            Id = new Guid("1f783aab-2a28-4371-917a-330b56f6bf1a"),
                            EndDate = new DateTime(2024, 10, 7, 18, 15, 39, 48, DateTimeKind.Utc).AddTicks(8250),
                            MatchesCount = 8,
                            Name = "Summer Showdown",
                            StartDate = new DateTime(2024, 10, 1, 18, 15, 39, 48, DateTimeKind.Utc).AddTicks(8249),
                            TournamentType = "Male"
                        },
                        new
                        {
                            Id = new Guid("8d62d922-192d-40cf-acc4-8430b030c37a"),
                            EndDate = new DateTime(2024, 10, 9, 18, 15, 39, 48, DateTimeKind.Utc).AddTicks(8254),
                            MatchesCount = 8,
                            Name = "Female Autumn Invitational",
                            StartDate = new DateTime(2024, 10, 4, 18, 15, 39, 48, DateTimeKind.Utc).AddTicks(8254),
                            TournamentType = "Female"
                        },
                        new
                        {
                            Id = new Guid("c3d4097b-d01e-4e28-aa64-56233b158d83"),
                            EndDate = new DateTime(2024, 10, 9, 18, 15, 39, 48, DateTimeKind.Utc).AddTicks(8296),
                            MatchesCount = 8,
                            Name = "Male Autumn Invitational",
                            StartDate = new DateTime(2024, 10, 4, 18, 15, 39, 48, DateTimeKind.Utc).AddTicks(8295),
                            TournamentType = "Male"
                        });
                });

            modelBuilder.Entity("TennisChallenge.Core.Entities.Players.FemalePlayer", b =>
                {
                    b.HasBaseType("TennisChallenge.Core.Entities.Players.Player");

                    b.Property<long>("ReactionTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(20L);

                    b.HasDiscriminator().HasValue("Female");

                    b.HasData(
                        new
                        {
                            Id = new Guid("def78e39-829c-4463-ba33-ac51c85d20fc"),
                            Age = 24L,
                            Country = "UK",
                            Gender = "Female",
                            Level = 6L,
                            Losses = 5L,
                            Name = "Jane Smith",
                            Wins = 40L,
                            ReactionTime = 80L
                        },
                        new
                        {
                            Id = new Guid("c03723d9-369a-4a0b-bbab-f9215222a6d3"),
                            Age = 22L,
                            Country = "Canada",
                            Gender = "Female",
                            Level = 4L,
                            Losses = 15L,
                            Name = "Alice Johnson",
                            Wins = 25L,
                            ReactionTime = 75L
                        },
                        new
                        {
                            Id = new Guid("8d8e4428-ac41-47ab-a50f-11001b45ccfa"),
                            Age = 23L,
                            Country = "Spain",
                            Gender = "Female",
                            Level = 5L,
                            Losses = 18L,
                            Name = "Maria Rodriguez",
                            Wins = 28L,
                            ReactionTime = 82L
                        },
                        new
                        {
                            Id = new Guid("71b73c9f-1912-434d-9e8f-e22f8ba6a4e9"),
                            Age = 27L,
                            Country = "France",
                            Gender = "Female",
                            Level = 7L,
                            Losses = 12L,
                            Name = "Sophie Laurent",
                            Wins = 45L,
                            ReactionTime = 85L
                        },
                        new
                        {
                            Id = new Guid("d500a7ce-3b77-43d3-81f6-61d31bde1447"),
                            Age = 25L,
                            Country = "Italy",
                            Gender = "Female",
                            Level = 6L,
                            Losses = 14L,
                            Name = "Isabella Rossi",
                            Wins = 30L,
                            ReactionTime = 78L
                        });
                });

            modelBuilder.Entity("TennisChallenge.Core.Entities.Players.MalePlayer", b =>
                {
                    b.HasBaseType("TennisChallenge.Core.Entities.Players.Player");

                    b.Property<long>("Force")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(20L);

                    b.Property<long>("Velocity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(20L);

                    b.HasDiscriminator().HasValue("Male");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b5e2c59e-d935-45b6-b087-1d74e4e11378"),
                            Age = 25L,
                            Country = "USA",
                            Gender = "Male",
                            Level = 5L,
                            Losses = 10L,
                            Name = "John Doe",
                            Wins = 30L,
                            Force = 90L,
                            Velocity = 85L
                        },
                        new
                        {
                            Id = new Guid("4b9d627f-836e-4c43-954c-baaf1053a035"),
                            Age = 28L,
                            Country = "Australia",
                            Gender = "Male",
                            Level = 7L,
                            Losses = 8L,
                            Name = "Bob Brown",
                            Wins = 50L,
                            Force = 95L,
                            Velocity = 90L
                        },
                        new
                        {
                            Id = new Guid("8354cd01-71fa-47c2-a66f-6042ee0907ac"),
                            Age = 26L,
                            Country = "Germany",
                            Gender = "Male",
                            Level = 6L,
                            Losses = 12L,
                            Name = "Michael Green",
                            Wins = 35L,
                            Force = 88L,
                            Velocity = 80L
                        },
                        new
                        {
                            Id = new Guid("02891735-bd59-4c05-b5bd-9e203ec8f45e"),
                            Age = 30L,
                            Country = "South Korea",
                            Gender = "Male",
                            Level = 8L,
                            Losses = 10L,
                            Name = "Alex Kim",
                            Wins = 60L,
                            Force = 92L,
                            Velocity = 87L
                        },
                        new
                        {
                            Id = new Guid("01416867-5fa7-406b-8509-5e00c0d95291"),
                            Age = 24L,
                            Country = "Ireland",
                            Gender = "Male",
                            Level = 5L,
                            Losses = 20L,
                            Name = "Liam O'Connor",
                            Wins = 27L,
                            Force = 83L,
                            Velocity = 79L
                        });
                });

            modelBuilder.Entity("PlayerTournament", b =>
                {
                    b.HasOne("TennisChallenge.Core.Entities.Players.Player", null)
                        .WithMany()
                        .HasForeignKey("PlayersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TennisChallenge.Core.Entities.Tournaments.Tournament", null)
                        .WithMany()
                        .HasForeignKey("TournamentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TennisChallenge.Core.Entities.Matches.Match", b =>
                {
                    b.HasOne("TennisChallenge.Core.Entities.Players.Player", "PlayerOne")
                        .WithMany()
                        .HasForeignKey("PlayerOneId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TennisChallenge.Core.Entities.Players.Player", "PlayerTwo")
                        .WithMany()
                        .HasForeignKey("PlayerTwoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TennisChallenge.Core.Entities.Tournaments.Tournament", "Tournament")
                        .WithMany("Matches")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlayerOne");

                    b.Navigation("PlayerTwo");

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("TennisChallenge.Core.Entities.Tournaments.PlayerTournament", b =>
                {
                    b.HasOne("TennisChallenge.Core.Entities.Players.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TennisChallenge.Core.Entities.Tournaments.Tournament", "Tournament")
                        .WithMany()
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("TennisChallenge.Core.Entities.Tournaments.Tournament", b =>
                {
                    b.Navigation("Matches");
                });
#pragma warning restore 612, 618
        }
    }
}
